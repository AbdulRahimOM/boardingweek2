// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.27.1
// source: pb/user.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Svc2_Methods_FullMethodName = "/Svc2/Methods"
)

// Svc2Client is the client API for Svc2 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Svc2Client interface {
	Methods(ctx context.Context, in *GetUserReq, opts ...grpc.CallOption) (*GetUserNamesResponse, error)
}

type svc2Client struct {
	cc grpc.ClientConnInterface
}

func NewSvc2Client(cc grpc.ClientConnInterface) Svc2Client {
	return &svc2Client{cc}
}

func (c *svc2Client) Methods(ctx context.Context, in *GetUserReq, opts ...grpc.CallOption) (*GetUserNamesResponse, error) {
	out := new(GetUserNamesResponse)
	err := c.cc.Invoke(ctx, Svc2_Methods_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Svc2Server is the server API for Svc2 service.
// All implementations must embed UnimplementedSvc2Server
// for forward compatibility
type Svc2Server interface {
	Methods(context.Context, *GetUserReq) (*GetUserNamesResponse, error)
	mustEmbedUnimplementedSvc2Server()
}

// UnimplementedSvc2Server must be embedded to have forward compatible implementations.
type UnimplementedSvc2Server struct {
}

func (UnimplementedSvc2Server) Methods(context.Context, *GetUserReq) (*GetUserNamesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Methods not implemented")
}
func (UnimplementedSvc2Server) mustEmbedUnimplementedSvc2Server() {}

// UnsafeSvc2Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Svc2Server will
// result in compilation errors.
type UnsafeSvc2Server interface {
	mustEmbedUnimplementedSvc2Server()
}

func RegisterSvc2Server(s grpc.ServiceRegistrar, srv Svc2Server) {
	s.RegisterService(&Svc2_ServiceDesc, srv)
}

func _Svc2_Methods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Svc2Server).Methods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Svc2_Methods_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Svc2Server).Methods(ctx, req.(*GetUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Svc2_ServiceDesc is the grpc.ServiceDesc for Svc2 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Svc2_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Svc2",
	HandlerType: (*Svc2Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Methods",
			Handler:    _Svc2_Methods_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/user.proto",
}
